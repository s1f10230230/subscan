# 詳細設計仕様書

## 1. ワイヤーフレーム・UI詳細設計

### 1.1 オンボーディング画面詳細

#### Welcome Screen（ステップ1/5）
```
┌─────────────────────────────────────────────┐
│ ◄ Skip                    CardSync      × │
│                                             │
│     🎯 [アニメーション: クレカ複数枚]         │
│                                             │
│    複数クレカの隠れた支出と                   │
│    サブスクを3分で発見                       │
│                                             │
│  ✅ 自動でクレカ利用を検出                   │
│  ✅ 解約忘れサブスクを発見                   │
│  ✅ 年間◯万円の節約可能額表示                │
│                                             │
│  ┌─────────────────────────────────────┐   │
│  │  📧 Gmailで始める（3分で完了）     │   │
│  └─────────────────────────────────────┘   │
│                                             │
│  💡 メール内容は読まず、件名と差出人のみ取得   │
│                                             │
│               ●○○○○                        │
└─────────────────────────────────────────────┘
```

#### Email Connection Screen（ステップ2/5）
```
┌─────────────────────────────────────────────┐
│ ◄                        2/5              │
│                                             │
│    🔐 Gmailアカウントに安全に接続            │
│                                             │
│  📧 取得対象                                │
│  • 過去3ヶ月のクレカ通知メール               │
│  • 件名と差出人のみ（本文は読みません）       │
│  • Netflix、楽天カードなど主要サービス       │
│                                             │
│  🛡️ セキュリティ                           │
│  • 最高水準の暗号化                          │
│  • メール内容の永続保存なし                  │
│  • いつでも連携解除可能                      │
│                                             │
│  ┌─────────────────────────────────────┐   │
│  │      🔗 Gmailに接続する            │   │
│  └─────────────────────────────────────┘   │
│                                             │
│  後で設定する                               │
│                                             │
│              ●●○○○                        │
└─────────────────────────────────────────────┘
```

#### Analysis Progress Screen（ステップ3/5）
```
┌─────────────────────────────────────────────┐
│                         3/5                │
│                                             │
│    🔍 メール分析中...                       │
│                                             │
│  ████████████░░░░░  73%                    │
│                                             │
│  📊 現在の状況                              │
│  • スキャン済み: 127/180 件                  │
│  • 検出したクレカ利用: 23 件                 │
│  • 見つかったサブスク: 4 個                 │
│                                             │
│  🎯 解析中のサービス                        │
│  ✅ 楽天カード                              │
│  🔄 Netflix をチェック中...                │
│  ⏳ Amazon Prime                           │
│  ⏳ Spotify                               │
│                                             │
│           残り時間: 約45秒                   │
│                                             │
│              ●●●○○                        │
└─────────────────────────────────────────────┘
```

#### WOW Results Screen（ステップ4/5）
```
┌─────────────────────────────────────────────┐
│                         4/5                │
│                                             │
│      🎉 すごい！隠れた支出を発見！            │
│                                             │
│  💳 過去3ヶ月の支出                         │
│  ┌─────────────────────────────────────┐   │
│  │          ¥127,340                   │   │
│  │    思ったより使ってました 😅           │   │
│  └─────────────────────────────────────┘   │
│                                             │
│  🔍 発見したサブスク                        │
│  📺 Netflix      ¥1,490/月                │
│  🎵 Spotify      ¥980/月                  │
│  📦 Amazon Prime ¥500/月                  │
│  💾 iCloud       ¥130/月                  │
│                                             │
│  💰 年間 ¥37,200 のサブスク代               │
│  ⚠️ 使っていないものがあれば年間◯万円節約可能  │
│                                             │
│  ┌─────────────────────────────────────┐   │
│  │      📊 詳しく見る                  │   │
│  └─────────────────────────────────────┘   │
│                                             │
│              ●●●●○                        │
└─────────────────────────────────────────────┘
```

#### Plan Selection Screen（ステップ5/5）
```
┌─────────────────────────────────────────────┐
│                         5/5                │
│                                             │
│    🚀 さらに詳しい分析と継続監視            │
│                                             │
│  無料版で続ける          スタンダード       │
│  ┌─────────────────┐    ┌───────────────┐  │
│  │  ✅ 手動家計簿    │    │ 🚀 今回の機能 │  │
│  │  ✅ 基本統計      │    │ ✅ メール自動取得│  │
│  │  ❌ メール連携    │    │ ✅ サブスク検知│  │
│  │  ❌ 自動監視      │    │ ✅ 継続監視   │  │
│  │                  │    │              │  │
│  │     無料          │    │  初月無料     │  │
│  │                  │    │  ¥980/月     │  │
│  └─────────────────┘    └───────────────┘  │
│                                             │
│  ⭐ 今なら初月無料でお試し可能                │
│                                             │
│  ┌─────────────────────────────────────┐   │
│  │    スタンダードで始める（初月無料）   │   │
│  └─────────────────────────────────────┘   │
│  無料版で続ける                             │
│                                             │
│              ●●●●●                        │
└─────────────────────────────────────────────┘
```

### 1.2 ダッシュボード詳細設計

#### Desktop Layout (1200px以上)
```
┌────────────────────────────────────────────────────────────────────┐
│ CardSync  [🔍 検索]        [👤 ユーザー] [⚙️ 設定] [💳 プラン]      │
├────────────────────────────────────────────────────────────────────┤
│                                                                    │
│ 📊 今月の概要                                                      │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ ¥127,340    15回      4個      ¥37,200                        ││
│ │ 月間支出    利用回数  サブスク  年間サブスク代                   ││
│ │ +12% ↗     平均¥8,489  🔔1      解約で年¥18,600節約可能       ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
│ 📈 支出推移                    🍕 カテゴリ別                      │
│ ┌─────────────────────────┐  ┌─────────────────────────────┐     │
│ │ [月次グラフ]              │  │ [円グラフ]                  │     │
│ │ Jan  Feb  Mar            │  │ 食費 40%                    │     │
│ │  ██   ███  ████         │  │ 交通費 25%                  │     │
│ │                         │  │ サブスク 20%                │     │
│ │ 支出  ¥89k→¥112k→¥127k  │  │ その他 15%                  │     │
│ └─────────────────────────┘  └─────────────────────────────┘     │
│                                                                    │
│ ⚠️ 要注意サブスク                📱 最新の取引                    │
│ ┌─────────────────────────┐  ┌─────────────────────────────┐     │
│ │ 🎵 Spotify              │  │ 3/15 Amazon ¥2,480          │     │
│ │ 30日間未使用             │  │ 3/14 Netflix ¥1,490         │     │
│ │ → 年¥11,760節約可能      │  │ 3/14 セブン ¥384             │     │
│ │                         │  │ 3/13 楽天 ¥8,900            │     │
│ │ 💾 iCloud 200GB         │  │ 3/13 Uber Eats ¥1,250       │     │
│ │ 容量50%未使用            │  │ → すべて見る                 │     │
│ └─────────────────────────┘  └─────────────────────────────┘     │
└────────────────────────────────────────────────────────────────────┘
```

#### Mobile Layout (< 768px)
```
┌─────────────────────────────────────┐
│ ☰  CardSync            🔔 ⚙️       │
├─────────────────────────────────────┤
│                                     │
│ 今月の支出                          │
│ ┌─────────────────────────────────┐ │
│ │        ¥127,340                 │ │
│ │         +12% ↗                  │ │
│ └─────────────────────────────────┘ │
│                                     │
│ ┌────────┐ ┌────────┐ ┌───────────┐│
│ │15回利用│ │4個サブス│ │¥18,600節約││
│ │平均¥8,489│ │ク🔔1  │ │可能       ││
│ └────────┘ └────────┘ └───────────┘│
│                                     │
│ 📈 支出推移 [過去3ヶ月 ▼]           │
│ ┌─────────────────────────────────┐ │
│ │ [簡略化グラフ]                  │ │
│ │ Jan   Feb   Mar                 │ │
│ │ ¥89k  ¥112k ¥127k              │ │
│ └─────────────────────────────────┘ │
│                                     │
│ ⚠️ 要注意サブスク                   │
│ ┌─────────────────────────────────┐ │
│ │ 🎵 Spotify                      │ │
│ │ 30日間未使用 → 年¥11,760節約可能│ │
│ │ [詳細を見る]                    │ │
│ └─────────────────────────────────┘ │
│                                     │
│ 📱 最新の取引 [すべて見る]           │
│ ┌─────────────────────────────────┐ │
│ │ 3/15 🛒 Amazon       ¥2,480    │ │
│ │ 3/14 📺 Netflix      ¥1,490    │ │
│ │ 3/14 🏪 セブン       ¥384      │ │
│ └─────────────────────────────────┘ │
│                                     │
│ [ホーム] [取引] [サブスク] [統計] [他]│
└─────────────────────────────────────┘
```

### 1.3 サブスクリプション管理画面詳細

#### Desktop Layout
```
┌────────────────────────────────────────────────────────────────────┐
│ ◄ ダッシュボード    サブスクリプション管理                         │
├────────────────────────────────────────────────────────────────────┤
│                                                                    │
│ 💰 サブスク概要                       🔄 最終更新: 2時間前        │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ 月額 ¥4,100   年額 ¥49,200   アクティブ 4個   節約可能 ¥18,600  ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
│ [🔍 再スキャン] [➕ 手動追加] [📊 節約分析]                        │
│                                                                    │
│ 🔥 要注意（解約推奨）                                              │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ 🎵 Spotify Premium                               ¥980/月  HIGH   ││
│ │ 最終利用: 30日前 • パターン学習中...                            ││
│ │ 💡 年間¥11,760の節約可能 [解約を検討] [使用中にマーク]          ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
│ ⚡ アクティブ                                                      │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ 📺 Netflix Premium                               ¥1,490/月 AUTO  ││
│ │ 次回請求: 4/15 • 高頻度利用                                     ││
│ │ 📝 メモ: 家族で使用中 [編集]                                    ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ 📦 Amazon Prime                                  ¥500/月  AUTO   ││
│ │ 次回請求: 4/20 • 中頻度利用                                     ││
│ │ 💡 配送・動画・音楽すべて利用 [詳細を見る]                       ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
│ ┌─────────────────────────────────────────────────────────────────┐│
│ │ 💾 iCloud 200GB                                ¥400/月  MANUAL  ││
│ │ 次回請求: 4/25 • 容量使用率: 52%                                ││
│ │ 💡 100GBプランに変更で年¥1,200節約 [プラン変更を検討]           ││
│ └─────────────────────────────────────────────────────────────────┘│
│                                                                    │
└────────────────────────────────────────────────────────────────────┘
```

## 2. エラーハンドリング具体ケース

### 2.1 Gmail API エラーハンドリング

#### エラー分類とユーザー向けメッセージ
```typescript
// lib/email/error-handler.ts
export enum EmailError {
  // 認証エラー
  OAUTH_EXPIRED = 'OAUTH_EXPIRED',
  OAUTH_REVOKED = 'OAUTH_REVOKED', 
  OAUTH_INVALID = 'OAUTH_INVALID',
  
  // API制限エラー
  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',
  RATE_LIMITED = 'RATE_LIMITED',
  
  // データエラー
  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',
  PARSING_FAILED = 'PARSING_FAILED',
  INVALID_FORMAT = 'INVALID_FORMAT',
  
  // システムエラー
  NETWORK_ERROR = 'NETWORK_ERROR',
  DATABASE_ERROR = 'DATABASE_ERROR',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

export const ERROR_MESSAGES = {
  [EmailError.OAUTH_EXPIRED]: {
    user: 'Gmailとの接続が期限切れです。再度接続してください。',
    action: 'RECONNECT',
    severity: 'HIGH'
  },
  [EmailError.QUOTA_EXCEEDED]: {
    user: 'Gmail APIの利用制限に達しました。しばらく待ってから再度お試しください。',
    action: 'RETRY_LATER',
    severity: 'MEDIUM'
  },
  [EmailError.PARSING_FAILED]: {
    user: 'メールの解析中にエラーが発生しました。サポートにお問い合わせください。',
    action: 'CONTACT_SUPPORT',
    severity: 'LOW'
  }
};

export class EmailErrorHandler {
  static handleGmailApiError(error: any): HandledError {
    if (error.response?.status === 401) {
      return {
        code: EmailError.OAUTH_EXPIRED,
        ...ERROR_MESSAGES[EmailError.OAUTH_EXPIRED]
      };
    }
    
    if (error.response?.status === 429) {
      return {
        code: EmailError.RATE_LIMITED,
        ...ERROR_MESSAGES[EmailError.QUOTA_EXCEEDED]
      };
    }
    
    // その他のエラー...
    return {
      code: EmailError.UNKNOWN_ERROR,
      user: '予期しないエラーが発生しました。',
      action: 'RETRY',
      severity: 'HIGH'
    };
  }
}
```

#### ユーザー向けエラー表示コンポーネント
```typescript
// components/email/ErrorAlert.tsx
interface ErrorAlertProps {
  error: HandledError;
  onRetry?: () => void;
  onReconnect?: () => void;
  onContactSupport?: () => void;
}

export function ErrorAlert({ error, onRetry, onReconnect, onContactSupport }: ErrorAlertProps) {
  const getActionButton = () => {
    switch (error.action) {
      case 'RECONNECT':
        return (
          <Button onClick={onReconnect} variant="primary">
            <RefreshCcw className="w-4 h-4 mr-2" />
            再接続する
          </Button>
        );
      case 'RETRY_LATER':
        return (
          <Button onClick={onRetry} variant="secondary" disabled>
            <Clock className="w-4 h-4 mr-2" />
            しばらく待ってから再試行
          </Button>
        );
      case 'CONTACT_SUPPORT':
        return (
          <Button onClick={onContactSupport} variant="outline">
            <MessageCircle className="w-4 h-4 mr-2" />
            サポートに連絡
          </Button>
        );
      default:
        return (
          <Button onClick={onRetry} variant="secondary">
            <RotateCcw className="w-4 h-4 mr-2" />
            再試行
          </Button>
        );
    }
  };

  const getSeverityColor = () => {
    switch (error.severity) {
      case 'HIGH': return 'border-red-200 bg-red-50 text-red-800';
      case 'MEDIUM': return 'border-yellow-200 bg-yellow-50 text-yellow-800';
      case 'LOW': return 'border-blue-200 bg-blue-50 text-blue-800';
      default: return 'border-gray-200 bg-gray-50 text-gray-800';
    }
  };

  return (
    <div className={cn("rounded-lg border p-4", getSeverityColor())}>
      <div className="flex items-start">
        <div className="flex-shrink-0">
          {error.severity === 'HIGH' && <AlertCircle className="h-5 w-5" />}
          {error.severity === 'MEDIUM' && <AlertTriangle className="h-5 w-5" />}
          {error.severity === 'LOW' && <Info className="h-5 w-5" />}
        </div>
        <div className="ml-3 flex-1">
          <p className="text-sm font-medium">{error.user}</p>
          {error.code && (
            <p className="mt-1 text-xs opacity-70">エラーコード: {error.code}</p>
          )}
        </div>
        <div className="ml-4 flex-shrink-0">
          {getActionButton()}
        </div>
      </div>
    </div>
  );
}
```

### 2.2 メール解析エラーの段階的処理

#### 信頼度別エラー処理
```typescript
// lib/email/error-recovery.ts
export class EmailParsingErrorRecovery {
  async handleParsingError(email: EmailMessage, error: Error): Promise<RecoveryResult> {
    const strategies = [
      this.tryAlternativePatterns,
      this.tryGenericExtraction, 
      this.tryUserFeedbackLearning,
      this.flagForManualReview
    ];

    for (const strategy of strategies) {
      try {
        const result = await strategy(email, error);
        if (result.success) {
          return result;
        }
      } catch (strategyError) {
        console.warn(`Strategy failed: ${strategy.name}`, strategyError);
      }
    }

    return {
      success: false,
      reason: 'ALL_STRATEGIES_FAILED',
      shouldShowToUser: false,
      logForImprovement: true
    };
  }

  private async tryAlternativePatterns(email: EmailMessage): Promise<RecoveryResult> {
    // より柔軟なパターンで再試行
    const flexiblePatterns = this.getFlexiblePatterns();
    // ... 実装
  }

  private async flagForManualReview(email: EmailMessage): Promise<RecoveryResult> {
    // 人間による確認が必要なアイテムとしてフラグ立て
    await prisma.emailReviewQueue.create({
      data: {
        emailId: email.
        